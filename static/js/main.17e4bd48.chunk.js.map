{"version":3,"sources":["components/ToDoList/ToDoListTaskCreator/ToDoListTaskCreator.jsx","components/ToDoList/TasksList/Task/Task.jsx","components/ToDoList/TasksList/TasksList.jsx","components/ToDoList/ToDoListFooter/ToDoListFooter.jsx","components/ToDoList/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoListTaskCreator","props","newIndex","e","key","newTask","title","currentTarget","value","isDone","id","this","onCreate","className","onKeyPress","createNewTask","bind","Component","Task","parrentDeleteCallback","deleteCallback","parrentUpdateCallback","updateCallback","task","type","checked","onClick","toggleTaskStatus","deleteTask","TasksList","tasks","map","index","onUpdate","onDelete","ToDoListFooter","onFilterChanges","dataset","filter","clearCompleted","t","length","data-value","handleFilterChanged","ToDoList","state","setState","filterValue","taskId","newTaskList","forEach","filteredTasks","upDateTask","changeFilter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17e4bd48.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\n\r\nclass ToDoListTaskCreator extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.newIndex = 2;\r\n    }\r\n\r\n\r\n    createNewTask(e) {\r\n        if (e.key === 'Enter') {\r\n            var newTask = {\r\n                title: e.currentTarget.value,\r\n                isDone: false,\r\n                id: this.newIndex\r\n            };\r\n            this.props.onCreate(newTask);\r\n            e.currentTarget.value = '';\r\n            this.newIndex++;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <input className=\"input\" onKeyPress={this.createNewTask.bind(this)}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoListTaskCreator;","import React, {Component} from 'react'\r\nimport './Task.css'\r\n\r\n\r\nclass Task extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n\r\n        this.parrentDeleteCallback = props.deleteCallback;\r\n        this.parrentUpdateCallback = props.updateCallback;\r\n    }\r\n\r\n    deleteTask(e) {\r\n        this.parrentDeleteCallback(this.props.task.id);\r\n    }\r\n\r\n    toggleTaskStatus(e) {\r\n\r\n        /*var newTask= {\r\n            ...this.state.task,\r\n            isDone: !this.state.task.isDone\r\n        };*/\r\n        var task = {\r\n            ...this.props.task\r\n        };\r\n        task.isDone = !task.isDone;\r\n        this.parrentUpdateCallback(task);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className={this.props.task.isDone ? 'task done' : 'task'}>\r\n                <input className=\"check\" type=\"checkbox\" checked={this.props.task.isDone} onClick={this.toggleTaskStatus.bind(this)}/>\r\n                <a className=\"task_text\">{this.props.task.title}</a>\r\n                <span className=\"delete\" onClick={this.deleteTask.bind(this)}>X</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React, {Component} from 'react'\r\nimport '../ToDoList.css'\r\nimport Task from \"./Task/Task\";\r\n\r\n\r\nclass TasksList extends Component {\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tasks\">\r\n                {this.props.tasks.map((task, index) => {\r\n                    return <Task task={task}\r\n                                 updateCallback={this.props.onUpdate}\r\n                                 deleteCallback={this.props.onDelete}\r\n                                 key={task.id}/>\r\n\r\n                })}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TasksList;","import React, {Component} from 'react'\r\nimport './ToDoListFooter.css'\r\n\r\nclass ToDoListFooter extends Component {\r\n\r\n    handleFilterChanged(e) {\r\n        this.props.onFilterChanges(e.currentTarget.dataset.value);\r\n    }\r\n\r\n    render() {\r\n        var {tasks, filter, clearCompleted} = this.props;\r\n        return (\r\n            <div className=\"todolist_footer\">\r\n                <div className=\"item_style\">\r\n                    <span>{tasks.filter((t) => !t.isDone).length} items left</span>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button className={filter === 'all' ? 'selected' : ''}\r\n                            data-value=\"all\"\r\n                            onClick={this.handleFilterChanged.bind(this)}>All\r\n                    </button>\r\n                    <button className={filter === 'active' ? 'selected' : ''}\r\n                            data-value=\"active\"\r\n                            onClick={this.handleFilterChanged.bind(this)}>Active\r\n                    </button>\r\n                    <button className={filter === 'completed' ? 'selected' : ''}\r\n                            data-value=\"completed\"\r\n                            onClick={this.handleFilterChanged.bind(this)}>Completed\r\n                    </button>\r\n                </div>\r\n                <div className=\"btn\">\r\n                    <a className=\"btn_clear\" onClick={clearCompleted}>Clear completed</a>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoListFooter;\r\n","import React, {Component} from 'react'\r\nimport './ToDoList.css'\r\nimport ToDoListTaskCreator from \"./ToDoListTaskCreator/ToDoListTaskCreator\";\r\nimport TasksList from \"./TasksList/TasksList\";\r\nimport ToDoListFooter from \"./ToDoListFooter/ToDoListFooter\";\r\n\r\n\r\nclass ToDoList extends Component {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n        this.state = {\r\n            tasks: [\r\n                {\r\n                    id: 0,\r\n                    title: \"Купить хлеба\",\r\n                    isDone: false\r\n                },\r\n                {\r\n                    title: \"Оплатить коммуналку\",\r\n                    isDone: false\r\n                }\r\n            ],\r\n            filter: \"all\"\r\n        };\r\n    }\r\n\r\n    clearCompleted() {\r\n        this.setState({\r\n            tasks: this.state.tasks.filter(t => !t.isDone)\r\n        });\r\n    }\r\n\r\n    changeFilter(filterValue) {\r\n        this.setState({filter: filterValue})\r\n    }\r\n\r\n\r\n    createNewTask(task) {\r\n        this.setState({\r\n            tasks: [...this.state.tasks, task]\r\n        });\r\n    }\r\n\r\n    deleteTask(taskId) {\r\n\r\n        const newTaskList = this.state.tasks.filter((t) => {\r\n            return t.id !== taskId;\r\n        });\r\n        this.setState({\r\n            tasks: newTaskList\r\n        });\r\n    }\r\n\r\n    upDateTask(task) {\r\n\r\n        const newTaskList = [...this.state.tasks];\r\n\r\n        newTaskList.forEach((t) => {\r\n            if (t.id === task.id) {\r\n                t.isDone = task.isDone;\r\n                return;\r\n            }\r\n        });\r\n        this.setState({\r\n            tasks: newTaskList\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        var {tasks, filter} = this.state;\r\n\r\n        var filteredTasks = [];\r\n        if (filter === 'all') filteredTasks = tasks;\r\n        if (filter === 'active') filteredTasks = tasks.filter(t => !t.isDone);\r\n        if (filter === 'completed') filteredTasks = tasks.filter(t => t.isDone);\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"todolist_left\">\r\n                                <h3 className=\"h3\">TODOLIST</h3>\r\n                                <p>Todolist — это простой список дел или список задач.\r\n                                    Запиши в него все свои важные дела, чтобы не забыть.\r\n                                    «Список дел» позволит вам эффективно организовать свое рабочее время.\r\n                                    В него можно записать все: от списка покупок до важных деловых встреч.\r\n                                    Создай свой «список задач» прямо сейчас, это не займет много времени.</p>\r\n                                </div>\r\n                \r\n                <div className=\"todolist_right\">\r\n                    <ToDoListTaskCreator onCreate={this.createNewTask.bind(this)}/>\r\n\r\n                    <TasksList tasks={filteredTasks}\r\n                               onDelete={this.deleteTask.bind(this)}\r\n                               onUpdate={this.upDateTask.bind(this)}/>\r\n\r\n                    <ToDoListFooter tasks={tasks} filter={filter}\r\n                                    onFilterChanges={this.changeFilter.bind(this)}\r\n                                    clearCompleted={this.clearCompleted.bind(this)}/>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./components/ToDoList/ToDoList\";\n\nfunction App() {\n  return (\n    <div>\n     <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<div>\n    <App />\n\n</div> ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}